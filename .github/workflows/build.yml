name: build

on:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build_ui:
    name: Build UI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4

      - name: Install dependencies
        run: npm install
        working-directory: ./browser/ui

      - name: Build project
        run: bash build.sh
        working-directory: ./browser/ui

      - name: Upload files
        uses: actions/upload-artifact@v4
        with:
          name: browser_ui
          path: ./browser/ui/dist

  checks:
    runs-on: ubuntu-latest
    needs: [build_ui]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: browser_ui
          path: ./browser/ui/dist
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Check Rust formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
      - name: Lint Rust
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all -- -D warnings

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip wheel setuptools
          python -m pip install -r tests/requirements-check.txt

      - name: Lint Python
        run: python -m ruff check

      - name: Check Python formatting
        run: python -m ruff format --check

  linux:
    runs-on: ${{ matrix.platform.runner }}
    needs: [build_ui]
    strategy:
      matrix:
        platform:
          - runner: ubuntu-22.04
            target: x86_64
          - runner: ubuntu-22.04
            target: x86
          # - runner: ubuntu-22.04
          #   target: aarch64
          #- runner: ubuntu-22.04
          #  target: armv7
          #- runner: ubuntu-22.04
          #  target: ppc64le
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: browser_ui
          path: ./browser/ui/dist
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          working-directory: ./pytwinsong
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          # sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          manylinux: auto
      - run: cargo build --release --package twinsong
      - name: Install modules
        run: |
          python -m pip install --upgrade pip wheel setuptools
          python -m pip install -r tests/requirements-tests.txt
          python -m pip install twinsong --no-index --find-links pytwinsong/dist --force-reinstall
      - name: Run pytest
        id: python_test
        run: |
          python -m pytest tests
        env: 
          TWINSONG_TEST_BIN: "release"
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}
          path: pytwinsong/dist

  # musllinux:
  #   runs-on: ${{ matrix.platform.runner }}
  #   needs: [build_ui]
  #   strategy:
  #     matrix:
  #       platform:
  #         - runner: ubuntu-22.04
  #           target: x86_64
  #         - runner: ubuntu-22.04
  #           target: x86
  #         - runner: ubuntu-22.04
  #           target: aarch64
  #         - runner: ubuntu-22.04
  #           target: armv7
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: 3.x
  #     - name: Build wheels
  #       uses: PyO3/maturin-action@v1
  #       with:
  #         target: ${{ matrix.platform.target }}
  #         args: --release --out dist --find-interpreter
  #         sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
  #         manylinux: musllinux_1_2
  #     - name: Upload wheels
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: wheels-musllinux-${{ matrix.platform.target }}
  #         path: dist

  windows:
    runs-on: ${{ matrix.platform.runner }}
    needs: [build_ui]
    strategy:
      matrix:
        platform:
          - runner: windows-latest
            target: x64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: browser_ui
          path: ./browser/ui/dist
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
          architecture: ${{ matrix.platform.target }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          working-directory: ./pytwinsong
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          # sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
      - run: cargo build --release --package twinsong
      - name: Install modules
        run: |
          python -m pip install --upgrade pip wheel setuptools
          python -m pip install -r tests/requirements-tests.txt
          python -m pip install twinsong --no-index --find-links pytwinsong/dist --force-reinstall
      - name: Run pytest
        id: python_test
        run: |
          python -m pytest tests
        env: 
          TWINSONG_TEST_BIN: "release"
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.platform.target }}
          path: pytwinsong/dist

  macos:
    runs-on: ${{ matrix.platform.runner }}
    needs: [build_ui]
    strategy:
      matrix:
        platform:
          - runner: macos-13
            target: x86_64
          - runner: macos-14
            target: aarch64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: browser_ui
          path: ./browser/ui/dist
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          working-directory: ./pytwinsong
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
      - run: cargo build --release --package twinsong
      - name: Install modules
        run: |
          python -m pip install --upgrade pip wheel setuptools
          python -m pip install -r tests/requirements-tests.txt
          python -m pip install twinsong --no-index --find-links pytwinsong/dist --force-reinstall
      - name: Run pytest
        id: python_test
        run: |
          python -m pytest tests
        env: 
          TWINSONG_TEST_BIN: "release"          
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.platform.target }}
          path: pytwinsong/dist

  # sdist:
  #   runs-on: ubuntu-latest
  #   needs: [build_ui]
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Build sdist
  #       uses: PyO3/maturin-action@v1
  #       with:
  #         command: sdist
  #         args: --out dist
  #     - name: Upload sdist
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: wheels-sdist
  #         path: dist


  

  release:
    name: Release
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
    #needs: [linux, musllinux, windows, macos, sdist]
    needs: [checks, linux, windows, macos]
    permissions:
      # Use to sign the release artifacts
      id-token: write
      # Used to upload release artifacts
      contents: write
      # Used to generate artifact attestation
      attestations: write
    steps:
      - uses: actions/download-artifact@v4
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: 'wheels-*/*'
      - name: Publish to PyPI
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*
